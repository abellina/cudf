/*
 * Copyright (c) 2021, NVIDIA CORPORATION.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include <cudf_test/base_fixture.hpp>
#include <cudf_test/column_utilities.hpp>
#include <cudf_test/column_wrapper.hpp>
#include <cudf_test/iterator_utilities.hpp>
#include <cudf_test/type_lists.hpp>

#include <cudf/lists/lists_column_view.hpp>
#include <cudf/search.hpp>
#include <cudf/table/table_view.hpp>

using bools_col   = cudf::test::fixed_width_column_wrapper<bool>;
using int32s_col  = cudf::test::fixed_width_column_wrapper<int32_t>;
using structs_col = cudf::test::structs_column_wrapper;
using strings_col = cudf::test::strings_column_wrapper;

constexpr bool print_all{false};  // For debugging only
constexpr int32_t null{0};        // Mark for null child elements
constexpr int32_t XXX{0};         // Mark for null struct elements

template <typename T>
struct TypedStructSearchTest : public cudf::test::BaseFixture {
};

using TestTypes = cudf::test::Concat<cudf::test::IntegralTypesNotBool,
                                     cudf::test::FloatingPointTypes,
                                     cudf::test::DurationTypes,
                                     cudf::test::TimestampTypes>;

TYPED_TEST_CASE(TypedStructSearchTest, TestTypes);

namespace {
auto search_bounds(cudf::column_view const& t_col_view,
                   std::unique_ptr<cudf::column> const& values_col,
                   std::vector<cudf::order> const& column_orders        = {cudf::order::ASCENDING},
                   std::vector<cudf::null_order> const& null_precedence = {
                     cudf::null_order::BEFORE})
{
  auto const t            = cudf::table_view{std::vector<cudf::column_view>{t_col_view}};
  auto const values       = cudf::table_view{std::vector<cudf::column_view>{values_col->view()}};
  auto result_lower_bound = cudf::lower_bound(t, values, column_orders, null_precedence);
  auto result_upper_bound = cudf::upper_bound(t, values, column_orders, null_precedence);
  return std::make_pair(std::move(result_lower_bound), std::move(result_upper_bound));
}

auto search_bounds(std::unique_ptr<cudf::column> const& t_col,
                   std::unique_ptr<cudf::column> const& values_col,
                   std::vector<cudf::order> const& column_orders        = {cudf::order::ASCENDING},
                   std::vector<cudf::null_order> const& null_precedence = {
                     cudf::null_order::BEFORE})
{
  return search_bounds(t_col->view(), values_col, column_orders, null_precedence);
}

auto null_at(cudf::size_type idx) { return cudf::test::iterator_with_null_at(idx); }

}  // namespace

// Test case when all input columns are empty
TYPED_TEST(TypedStructSearchTest, EmptyInputTest)
{
  using col_wrapper = cudf::test::fixed_width_column_wrapper<TypeParam, int32_t>;

  auto child_col_t     = col_wrapper{};
  auto const structs_t = structs_col{{child_col_t}, std::vector<bool>{}}.release();

  auto child_col_values     = col_wrapper{};
  auto const structs_values = structs_col{{child_col_values}, std::vector<bool>{}}.release();

  auto const results  = search_bounds(structs_t, structs_values);
  auto const expected = int32s_col{};
  CUDF_TEST_EXPECT_COLUMNS_EQUAL(expected, results.first->view(), print_all);
  CUDF_TEST_EXPECT_COLUMNS_EQUAL(expected, results.second->view(), print_all);
}

TYPED_TEST(TypedStructSearchTest, TrivialInputTests)
{
  using col_wrapper = cudf::test::fixed_width_column_wrapper<TypeParam, int32_t>;

  auto child_col_t     = col_wrapper{10, 20, 30, 40, 50};
  auto const structs_t = structs_col{{child_col_t}}.release();

  auto child_col_values1     = col_wrapper{0, 1, 2, 3, 4};
  auto const structs_values1 = structs_col{{child_col_values1}}.release();

  auto child_col_values2     = col_wrapper{100, 101, 102, 103, 104};
  auto const structs_values2 = structs_col{{child_col_values2}}.release();

  auto const results1  = search_bounds(structs_t, structs_values1);
  auto const expected1 = int32s_col{0, 0, 0, 0, 0};
  CUDF_TEST_EXPECT_COLUMNS_EQUAL(expected1, results1.first->view(), print_all);
  CUDF_TEST_EXPECT_COLUMNS_EQUAL(expected1, results1.second->view(), print_all);

  auto const results2  = search_bounds(structs_t, structs_values2);
  auto const expected2 = int32s_col{5, 5, 5, 5, 5};
  CUDF_TEST_EXPECT_COLUMNS_EQUAL(expected2, results2.first->view(), print_all);
  CUDF_TEST_EXPECT_COLUMNS_EQUAL(expected2, results2.second->view(), print_all);
}

TYPED_TEST(TypedStructSearchTest, SlicedColumnInputTests)
{
  using col_wrapper = cudf::test::fixed_width_column_wrapper<TypeParam, int32_t>;

  auto child_col_values     = col_wrapper{0, 1, 2, 3, 4, 5};
  auto const structs_values = structs_col{child_col_values}.release();

  auto child_col_t              = col_wrapper{0, 1, 2, 2, 2, 2, 3, 3, 4, 4};
  auto const structs_t_original = structs_col{child_col_t}.release();

  auto structs_t = cudf::slice(structs_t_original->view(), {0, 10})[0];  // the entire column t
  auto results   = search_bounds(structs_t, structs_values);
  auto expected_lower_bound = int32s_col{0, 1, 2, 6, 8, 10};
  auto expected_upper_bound = int32s_col{1, 2, 6, 8, 10, 10};
  CUDF_TEST_EXPECT_COLUMNS_EQUAL(expected_lower_bound, results.first->view(), print_all);
  CUDF_TEST_EXPECT_COLUMNS_EQUAL(expected_upper_bound, results.second->view(), print_all);

  structs_t            = cudf::slice(structs_t_original->view(), {0, 5})[0];
  results              = search_bounds(structs_t, structs_values);
  expected_lower_bound = int32s_col{0, 1, 2, 5, 5, 5};
  expected_upper_bound = int32s_col{1, 2, 5, 5, 5, 5};
  CUDF_TEST_EXPECT_COLUMNS_EQUAL(expected_lower_bound, results.first->view(), print_all);
  CUDF_TEST_EXPECT_COLUMNS_EQUAL(expected_upper_bound, results.second->view(), print_all);

  structs_t            = cudf::slice(structs_t_original->view(), {5, 10})[0];
  results              = search_bounds(structs_t, structs_values);
  expected_lower_bound = int32s_col{0, 0, 0, 1, 3, 5};
  expected_upper_bound = int32s_col{0, 0, 1, 3, 5, 5};
  CUDF_TEST_EXPECT_COLUMNS_EQUAL(expected_lower_bound, results.first->view(), print_all);
  CUDF_TEST_EXPECT_COLUMNS_EQUAL(expected_upper_bound, results.second->view(), print_all);
}

TYPED_TEST(TypedStructSearchTest, UpperBoundColMismatchTest)
{
  using col_wrapper = cudf::test::fixed_width_column_wrapper<TypeParam, int64_t>;

  auto child_col_t = col_wrapper{
  -4470861354342295907L,
  -4469889584615606175L,
  -4469351010538061998L,
  -4469302489710674935L,
  -4469113782499110891L,
  -4468777937952251706L,
  -4465210984188832281L,
  -4464813282207065240L,
  -4462934981902044732L,
  -4462410771694306385L,
  -4460579830837224418L,
  -4458905486508757218L,
  -4458388445995868470L,
  -4455269716060822437L,
  -4454532712285652665L,
  -4453497355758587973L,
  -4449799421717629672L,
  -4449777328616356365L,
  -4449275799624628873L,
  -4445938777580416074L,
  -4445388029420605054L,
  -4444973913139558699L,
  -4443893437671023369L,
  -4442250898690864713L,
  -4440475428269327032L,
  -4437181712838256519L,
  -4436777099568726029L,
  -4436676752191468086L,
  -4436187244243544705L,
  -4434842012646737227L,
  -4433545808970789018L,
  -4433130809444156159L,
  -4432169692034073285L,
  -4431268960697331434L,
  -4430943495087096101L,
  -4429954232927015421L,
  -4428237524657926774L,
  -4428176004238837890L,
  -4427952089759638606L,
  -4424927531777913070L,
  -4423741785331692410L,
  -4419462682385217739L,
  -4418972620228748188L,
  -4418615577675533680L,
  -4417892856242617932L,
  -4412685169508357276L,
  -4412383144635908928L,
  -4411461520771190474L,
  -4410122268623568430L,
  -4409995387506898787L,
  -4409732206090250672L,
  -4408453453882062604L,
  -4407756076847777337L,
  -4406491362809244638L,
  -4405036277465727107L,
  -4401074490789612485L,
  -4399705750280352082L,
  -4399454153261706553L,
  -4396987862653457776L,
  -4396942649332759963L,
  -4396837973906733292L,
  -4396488358912190074L,
  -4395544948570655484L,
  -4394859856894209030L,
  -4392273477178997518L,
  -4391721167112799354L,
  -4390641992870399193L,
  -4388136190116180947L,
  -4387438825324405305L,
  -4384832018599531748L,
  -4384027875795164477L,
  -4383321085565177156L,
  -4383312497653461598L,
  -4381822344980032030L,
  -4380504093798780592L,
  -4376290117480704250L,
  -4373713598474526069L,
  -4372207600133595421L,
  -4371988309871240534L,
  -4371746232587295370L,
  -4371161305468025565L,
  -4370618236129577748L,
  -4366602306178768941L,
  -4364586894669856193L,
  -4362290376862772701L,
  -4360726975019202667L,
  -4358410205609816217L,
  -4357974687582070074L,
  -4357111754232208531L,
  -4356797429089582430L,
  -4354487265255743490L,
  -4353439574282644194L,
  -4351198812638083509L,
  -4350569193751993257L,
  -4349997138215420968L,
  -4346502453733695798L,
  -4345927464117995970L,
  -4342359035676788966L,
  -4342353999863665467L,
  -4340635471799019724L,
  -4340389353373762178L,
  -4339455570679669718L,
  -4339065169993601417L,
  -4338693146976342278L,
  -4337939862492941293L,
  -4337879769519551655L,
  -4335453381847055752L,
  -4334958317105557950L,
  -4334576948032163132L,
  -4332854799447351763L,
  -4329588991715549627L,
  -4329571379395681699L,
  -4328847229287796810L,
  -4327509397957667509L,
  -4323876986533533442L,
  -4322932392921922691L,
  -4321087658709738064L,
  -4317586304298322120L,
  -4317414757126022848L,
  -4315722554981024101L,
  -4315690184385531045L,
  -4315351048447081823L,
  -4313894605168921089L,
  -4312228391829787782L,
  -4309287791349517449L,
  -4309258556053549908L,
  -4308618345145853201L,
  -4307048754458719428L,
  -4306341685050965462L,
  -4305778379789582037L,
  -4304839148080503518L,
  -4302074751803633855L,
  -4301319068750288630L,
  -4300387011303473942L,
  -4299902451203919713L,
  -4299849095778060445L,
  -4298192982802233414L,
  -4297000297842967526L,
  -4295150484162241008L,
  -4294004010432698031L,
  -4292773522846882764L,
  -4290648452898900105L,
  -4290276648361239121L,
  -4289741612632258338L,
  -4287935373994686430L,
  -4286470156040024143L,
  -4286227727642552771L,
  -4285772894393033902L,
  -4285215484418448785L,
  -4284471159667905766L,
  -4283956175365398807L,
  -4283781275816916313L,
  -4283547429109001470L,
  -4282672429023585588L,
  -4282496212154119567L,
  -4282237763804713727L,
  -4281752501265820100L,
  -4281508982810815615L,
  -4281098097891888874L,
  -4278067865994936846L,
  -4276968884457062931L,
  -4276253690791337676L,
  -4275859707980676491L,
  -4273785369321192929L,
  -4273643426390278574L,
  -4272241279533008481L,
  -4272220022794308988L,
  -4271502186995824692L,
  -4268196945412978858L,
  -4267567100843768660L,
  -4266779524951163258L,
  -4266649655472759210L,
  -4265684112974339634L,
  -4264501459203416247L,
  -4263627340611512670L,
  -4263369948463014574L,
  -4261054916783014543L,
  -4260254308521073103L,
  -4255226165680115072L,
  -4254419610105299812L,
  -4251157899580696149L,
  -4250065218623608010L,
  -4248241783713338823L,
  -4248111793002951038L,
  -4247622648897751890L,
  -4244836508212789620L,
  -4244576365200674732L,
  -4243926621834095671L,
  -4241640289510468174L,
  -4239929414130021075L,
  -4239871915330275989L,
  -4236913777931539024L,
  -4235208141204626068L,
  -4233663313649454207L,
  -4231875267199062159L,
  -4230709927255951211L,
  -4230220210799562300L,
  -4227963531375754662L,
  -4227744698568369831L,
  -4226654007444651098L,
  -4225338418778261087L,
  -4221794125628881657L,
  -4221667285232240727L,
  -4220187803339037343L,
  -4220130182823052549L,
  -4220062982727041431L,
  -4217398052194238592L,
  -4216154379405402125L,
  -4215237906516862331L,
  -4215022960383823327L,
  -4214267542101161573L,
  -4214218139204074619L,
  -4211779596965189066L,
  -4209667832463022499L,
  -4209243107345320870L,
  -4209057271217494099L,
  -4205261190647490323L,
  -4204284088446394444L,
  -4203746916934218603L,
  -4203073789760180042L,
  -4199654723676096463L,
  -4196293957413592763L,
  -4195602297109628746L,
  -4194793214411907039L,
  -4194732814700749019L,
  -4193786952854125592L,
  -4193439978455307324L,
  -4193292192703071717L,
  -4189403111371326187L,
  -4189147699682583375L,
  -4186086171728704989L,
  -4184125355635508252L,
  -4182664442145286722L,
  -4182393941398099797L,
  -4181641573701323350L,
  -4181147870032402858L,
  -4180218516312667984L,
  -4177373407680612215L,
  -4177126143197697951L,
  -4177016367607340614L,
  -4176198958785784467L,
  -4175480063145574623L,
  -4175425134795332185L,
  -4174155214386908412L,
  -4173507113249178664L,
  -4173368830620756082L,
  -4172137484811118432L,
  -4167819100540715331L,
  -4167184273905297014L,
  -4166740110614891922L,
  -4165772446292717953L,
  -4165476452259391984L,
  -4164575516494517048L,
  -4164421017963624049L,
  -4160945362036303255L,
  -4160808556160101201L,
  -4160197357996154137L,
  -4158503756157315569L,
  -4157145124049071584L,
  -4155585704059017540L,
  -4147183896120542418L,
  -4144637772291102298L,
  -4144352724727892863L,
  -4141760934543660122L,
  -4140336779359576312L,
  -4138891077184448560L,
  -4138814112615346577L,
  -4138577047693823241L,
  -4134952261799422611L,
  -4133129649636966058L,
  -4132157640137280313L,
  -4130235918072555602L,
  -4129799524497837107L,
  -4128653747066101801L,
  -4128101550838959236L,
  -4127425474084684857L,
  -4126644260927670605L,
  -4126231444418611472L,
  -4125919140488022263L,
  -4125433888023610391L,
  -4124761382347584162L,
  -4122794960181118424L,
  -4122146578639630550L,
  -4121936569854844362L,
  -4120940019937794340L,
  -4118519290617490488L,
  -4118092699024508108L,
  -4115584400948442867L,
  -4113612814617721927L,
  -4113340183951572337L,
  -4112090586943359065L,
  -4111497657372231066L,
  -4110546748447729905L,
  -4108256408094695445L,
  -4105346836608026425L,
  -4103752193249807482L,
  -4102440477732594526L,
  -4101272461132800453L,
  -4100670492148181933L,
  -4099681318744258589L,
  -4097952161373208038L,
  -4096422419686059482L,
  -4094071903187052373L,
  -4093688230103208195L,
  -4093600895720214274L,
  -4088769371504240130L,
  -4087977376551642721L,
  -4086507690349224017L,
  -4086441620855995212L,
  -4086168153666839765L,
  -4082445873271881758L,
  -4080733904516255346L,
  -4079234278187321390L,
  -4078678331211601367L,
  -4078411736054143493L,
  -4078286258898921538L,
  -4076552680890409948L,
  -4074549962450312285L,
  -4065623726950166725L,
  -4065096321855861902L,
  -4057807345908629302L,
  -4056575361074020219L,
  -4055739181985412475L,
  -4053743121261643543L,
  -4050688258767185043L,
  -4050180326465024116L,
  -4049617026798224345L,
  -4049041769951083520L,
  -4047909205387519282L,
  -4047261352094707934L,
  -4047208080090568384L,
  -4047145441073686474L,
  -4044384818370445646L,
  -4043908906032734742L,
  -4042227482186299157L,
  -4041010756381546541L,
  -4040700320920905297L,
  -4040096174677286492L,
  -4039677868502696960L,
  -4039025917373236519L,
  -4036039268720820708L,
  -4035031087553999524L,
  -4033993753824124693L,
  -4032190042543012904L,
  -4031628241048981424L,
  -4030111527462550686L,
  -4029168197008430018L,
  -4028427607972905853L,
  -4027274500756931072L,
  -4026899462962561344L,
  -4025982157977531333L,
  -4023856823740686466L,
  -4023755005035329507L,
  -4022465142677447730L,
  -4022249476918704789L,
  -4021253254896796942L,
  -4020995056403350671L,
  -4019792351858925746L,
  -4019561275734682414L,
  -4019284963340486653L,
  -4018144355373821272L,
  -4018082103894010684L,
  -4016557386835676705L,
  -4015754503247323752L,
  -4015608151560397911L,
  -4015574536166854655L,
  -4014746959165930193L,
  -4014499407773420064L,
  -4012348312794194551L,
  -4010207528370540200L,
  -4009584407405070786L,
  -4007920314770290666L,
  -4007506986564364340L,
  -4006950674331673954L,
  -4006195315489260004L,
  -4005755899247056817L,
  -4005628937371771068L,
  -4005494604568987164L,
  -4004906549766696748L,
  -4002804306933162077L,
  -4001523264451783092L,
  -3999938571222821647L,
  -3997354478558893958L,
  -3996460380674557165L,
  -3995872252248981503L,
  -3995477158221941096L,
  -3988139503825079704L,
  -3985593407185677253L,
  -3982312856798895585L,
  -3981499096095588233L,
  -3979838968575229242L,
  -3978183066041938159L,
  -3975895876400713024L,
  -3975641413590596450L,
  -3975633541253175407L,
  -3973553854367454954L,
  -3973124742428198689L,
  -3972380833323634831L,
  -3971680245995095086L,
  -3969726924127637767L,
  -3968059870350731018L,
  -3967994520129981366L,
  -3967987321021171452L,
  -3967656432540079638L,
  -3967649862176971846L,
  -3967225959034847461L,
  -3966438123308602284L,
  -3966219103638635793L,
  -3965887761611340643L,
  -3962995726801853022L,
  -3960495845662389518L,
  -3959870118514283579L,
  -3959635180421486324L,
  -3957927225883037381L,
  -3956977171896211956L,
  -3955807204190444736L,
  -3954486655490642383L,
  -3952830759611642816L,
  -3952463484262419636L,
  -3952083959874939558L,
  -3950856785430599215L,
  -3950591732675516931L,
  -3948448130940580037L,
  -3947277978344236509L,
  -3947126727447844815L,
  -3946802341925271182L,
  -3946436525154826217L,
  -3945745199144326719L,
  -3944887420352485231L,
  -3943690797339868450L,
  -3943217507981081360L,
  -3941572524507405656L,
  -3939134561159498770L,
  -3937778805822693177L,
  -3937092486124718227L,
  -3934752811534731328L,
  -3933551553970456154L,
  -3933285100676401070L,
  -3932622070910785162L,
  -3932337410191669217L,
  -3932258403994161401L,
  -3932195108433148943L,
  -3931879391455883961L,
  -3931390936648650771L,
  -3927577131453807992L,
  -3926725067570420146L,
  -3926671291928102304L,
  -3925614978311196792L,
  -3925494715014439072L,
  -3925419182719200516L,
  -3925402653240738097L,
  -3925160253851075603L,
  -3923777762401353241L,
  -3919810929546454525L,
  -3919786520082617197L,
  -3917705782224295580L,
  -3916862150126294764L,
  -3916410438929448198L,
  -3916200932090359715L,
  -3915749085214103042L,
  -3915435899898966815L,
  -3914179142210425244L,
  -3913721998768999381L,
  -3913527243792523902L,
  -3912863825954829553L,
  -3911378936848779600L,
  -3907280782645940953L,
  -3905151446683947502L,
  -3898470174606425176L,
  -3898319094561097174L,
  -3896552993106215837L,
  -3894262791594682813L,
  -3892786523318525702L,
  -3890813019937273134L,
  -3887242470353854224L,
  -3886575456259664597L,
  -3886032578364478643L,
  -3885590854167458567L,
  -3884841604969028667L,
  -3882582982985822745L,
  -3881483845269598586L,
  -3880334453294143778L,
  -3880290780305612687L,
  -3879984453623284357L,
  -3879284155365984104L,
  -3877018173714236851L,
  -3874431722535041292L,
  -3872478173956384480L,
  -3872404643651381970L,
  -3872194131683727192L,
  -3870838938802842264L,
  -3865227481244789580L,
  -3864914742753951824L,
  -3861997313742708895L,
  -3858913463797865217L,
  -3855386427379670327L,
  -3854438537848045017L,
  -3852873364433174658L,
  -3851508921804259262L,
  -3850469111368074815L,
  -3845202876481139073L,
  -3844602612158184451L,
  -3843754963802659862L,
  -3843705599795093016L,
  -3841910424333011824L,
  -3839937518227235414L,
  -3837608935191934779L,
  -3836742753451156966L,
  -3836352349748709034L,
  -3833434743276113731L,
  -3832964284115022306L,
  -3832111320284348538L,
  -3831253511348812968L,
  -3831230519572659814L,
  -3830903483698048843L,
  -3829796349633041562L,
  -3829080456869321242L,
  -3825937581272345279L,
  -3825300903444590241L,
  -3823939226290251052L,
  -3823362353916566118L,
  -3822602681597977053L,
  -3822434375642896673L,
  -3821434467212276646L,
  -3820994418305124683L,
  -3818978213336191194L,
  -3815472807675799008L,
  -3815202450268356077L,
  -3812836035632484328L,
  -3811330074108569920L,
  -3810797985771116753L,
  -3809844326744306462L,
  -3809287945005284732L,
  -3808572148010383729L,
  -3808421722982806422L,
  -3807933109718641567L,
  -3806394956410216119L,
  -3806085926417236146L,
  -3806030167995700124L,
  -3804840759920190980L,
  -3804296936588581140L,
  -3803730061042610848L,
  -3803695993384820152L,
  -3802765169676234937L,
  -3802360234046030841L,
  -3801192910996186070L,
  -3800757533422075525L,
  -3799465953821835546L,
  -3798714309548475829L,
  -3798163765099156434L,
  -3797927531515351253L,
  -3796648258900071373L,
  -3796527710106070673L,
  -3795374802392504722L,
  -3791180848619511767L,
  -3790831121718891564L,
  -3790545472201755117L,
  -3789690595189838824L,
  -3789077560745386214L,
  -3788839118922177757L,
  -3788519491128091023L,
  -3788490411332273513L,
  -3787062867204780747L,
  -3786997190723845220L,
  -3785951793618875476L,
  -3784835682436354780L,
  -3780659172982822811L,
  -3778978891180500879L,
  -3775006378122798151L,
  -3774880464705268974L,
  -3773741843913203838L,
  -3773241032028194393L,
  -3773142739722224030L,
  -3773035840494334277L,
  -3772394949213088132L,
  -3771029654709899453L,
  -3770883219172452840L,
  -3770102441478400872L,
  -3769696669690001929L,
  -3769238255850112949L,
  -3768349485599815811L,
  -3768029955521914122L,
  -3762521975322849204L,
  -3759651306974392470L,
  -3759137005582025265L,
  -3758965716122252997L,
  -3758462572815701375L,
  -3757514528027235154L,
  -3756643826226561796L,
  -3755851520231686875L,
  -3755264918634937200L,
  -3755238213486359861L,
  -3753389093410320946L,
  -3751811730450657301L,
  -3750960016043014942L,
  -3748270571959487009L,
  -3747542198485356663L,
  -3745980757726661553L,
  -3745848976149346389L,
  -3745553038599548305L,
  -3744411442555124391L,
  -3742414117539030597L,
  -3737597136101245615L,
  -3734755008644332507L,
  -3734291746231671724L,
  -3733443742399793310L,
  -3731848073307847788L,
  -3731154256732892645L,
  -3730521205817110611L,
  -3727099499779535843L,
  -3726706506363347400L,
  -3725884023803922677L,
  -3724703159985341424L,
  -3724201826395077235L,
  -3724016058940788277L,
  -3723884256537391334L,
  -3722889856467443056L,
  -3722764717317951056L,
  -3722480872094487943L,
  -3721760463056371442L,
  -3719834761141326336L,
  -3717223593471082735L,
  -3716592290727021695L,
  -3712353656401217677L,
  -3712045313908172611L,
  -3708087275514191808L,
  -3706991445163935070L,
  -3706212515070791538L,
  -3706060609625629012L,
  -3702766990136359658L,
  -3702445596405923717L,
  -3698820434559554980L,
  -3698481980648404410L,
  -3698206432399293435L,
  -3697021239011828163L,
  -3696832416373819093L,
  -3696068895172375807L,
  -3690447650574148629L,
  -3688888758195088543L,
  -3686886832738431361L,
  -3686083320521375686L,
  -3684985418883111736L,
  -3684025014158028210L,
  -3683748901009038568L,
  -3683362080474268457L,
  -3683107402239767865L,
  -3677545347510683634L,
  -3676521972307751731L,
  -3673279576858162042L,
  -3673010944840974252L,
  -3671840378474717111L,
  -3671569041165301744L,
  -3670699645720077755L,
  -3666838073225666297L,
  -3664089409341254139L,
  -3664036959620012521L,
  -3662507521947566775L,
  -3658461991904447489L,
  -3658010528163495164L,
  -3656951533954703112L,
  -3656631367544823545L,
  -3653300587780740408L,
  -3653221441656899462L,
  -3652693525793593093L,
  -3651742755304428360L,
  -3651631704735890574L,
  -3649856254470379366L,
  -3648937952288204585L,
  -3648088109403390359L,
  -3647612165448376593L,
  -3647396975668363692L,
  -3646861086039300572L,
  -3644036510704821854L,
  -3643083104774449486L,
  -3639916244466898810L,
  -3638438038736069362L,
  -3638388006000408938L,
  -3637472525906465320L,
  -3637416416115567724L,
  -3636850115515407853L,
  -3636505287804932925L,
  -3634651405279581343L,
  -3631778463579242294L,
  -3631069216498620109L,
  -3630199246431716232L,
  -3629724583447014085L,
  -3627977802372315535L,
  -3627255807353875855L,
  -3626416259379097894L,
  -3626226539500666727L,
  -3625862052600832512L,
  -3625466238262371567L,
  -3624580424904092421L,
  -3623591983878626071L,
  -3622346731568596027L,
  -3620730281524599665L,
  -3620426140662889390L,
  -3618577191317267757L,
  -3617239168176229946L,
  -3616942916381062559L,
  -3616876618308289238L,
  -3615427664715157907L,
  -3613328941463997688L,
  -3612885527322105255L,
  -3612110258981901996L,
  -3610809708980137491L,
  -3610516040404202849L,
  -3609227721296985907L,
  -3606321348736636263L,
  -3601847743145172871L,
  -3600924448844317878L,
  -3598266917438048544L,
  -3595354665693189408L,
  -3592294868719990859L,
  -3589250798737638663L,
  -3588678416468347359L,
  -3588549278432519773L,
  -3588280201165725294L,
  -3586748942163485544L,
  -3584726200759576039L,
  -3584077435754429256L,
  -3582410838319809165L,
  -3581204208041140222L,
  -3579458786357380783L,
  -3577655324010899154L,
  -3577654939930078586L,
  -3577562229238186338L,
  -3575238144051883659L,
  -3574953220986918268L,
  -3568163845750728302L,
  -3565853755143756948L,
  -3564240279454377423L,
  -3563575438292791775L,
  -3563078967653011320L,
  -3562905123403774263L,
  -3562146377488672514L,
  -3559322247323110767L,
  -3559292400387031783L,
  -3559014758551936576L,
  -3557282720355034062L,
  -3555987122188323831L,
  -3554048145226765985L,
  -3553775516920565458L,
  -3553592694339591536L,
  -3552399386152274199L,
  -3551250194295616358L,
  -3549663455060208640L,
  -3549161204977310403L,
  -3547911021035879857L,
  -3546555738850129415L,
  -3546365836650513719L,
  -3544699065771506652L,
  -3543150222070457723L,
  -3539215893588560076L,
  -3537949523008942397L,
  -3536751904038341869L,
  -3535341936778035433L,
  -3534208077650448499L,
  -3533742377714797395L,
  -3530194110893295372L,
  -3528706424607378281L,
  -3527957848476969580L,
  -3526631062551131423L,
  -3526606450604696836L,
  -3525090889192746115L,
  -3524355831073431257L,
  -3524048893431536892L,
  -3520261735759867921L,
  -3519375162533259991L,
  -3517679460254889728L,
  -3516101563746129379L,
  -3513036953175168036L,
  -3511598491687722427L,
  -3511045262991500025L,
  -3510561225056650779L,
  -3509759204922476031L,
  -3506116493660507182L,
  -3505679863774752869L,
  -3503858016671023860L,
  -3503254841642720141L,
  -3502681551666104275L,
  -3501242749111827635L,
  -3498477736272270845L,
  -3497711507898274560L,
  -3497350183552905932L,
  -3494891574685078561L,
  -3493750790533196893L,
  -3493018860693268226L,
  -3492886437269250074L,
  -3490566355519672176L,
  -3490024708053155918L,
  -3485932026797164789L,
  -3485846124498636501L,
  -3483061023568052598L,
  -3479376787935602357L,
  -3477389054215587283L,
  -3475958950513522105L,
  -3473074777146625365L,
  -3469013138003473499L,
  -3468031337643184640L,
  -3468018018032249782L,
  -3467886084959869398L,
  -3467771168724990101L,
  -3467498659154787521L,
  -3466094790278990377L,
  -3463608439977073334L,
  -3462793679204452151L,
  -3461887118924755415L,
  -3461682758714556950L,
  -3461404183041433063L,
  -3460434630170487624L,
  -3459353930791333248L,
  -3457068632852177752L,
  -3455862873061199622L,
  -3455392074947585926L,
  -3454883132103873698L,
  -3453525182732864051L,
  -3451845783766811688L,
  -3450869687497437719L,
  -3450574387328935672L,
  -3449642377787012951L,
  -3447508209597245382L,
  -3446547337555631285L,
  -3445238013379893119L,
  -3442502580349491214L,
  -3441032114709602090L,
  -3439624695374206960L,
  -3437447260072907896L,
  -3430487495716498775L,
  -3430047221933506892L,
  -3429591953151252814L,
  -3425894511057377107L,
  -3425793661445987555L,
  -3425233606096905482L,
  -3424162193182278526L,
  -3423605388915230628L,
  -3421652691378293945L,
  -3420704138479307933L,
  -3418279833022182387L,
  -3416625399955345448L,
  -3415642796788889238L,
  -3414285607821764974L,
  -3413678298443410927L,
  -3412210595306404717L,
  -3411968739387075102L,
  -3409231044899810015L,
  -3407954875920025246L,
  -3405590021601344234L,
  -3404149567731071135L,
  -3402432083354519943L,
  -3402041403746808680L,
  -3401755898236885317L,
  -3400368568740923083L,
  -3399794975901590130L,
  -3398230712230342550L,
  -3397744363387116072L,
  -3397727876402388416L,
  -3397135766654189134L,
  -3394913159385982076L,
  -3394897862128212601L,
  -3393977322153480423L,
  -3393280441137643063L,
  -3392927178625016838L,
  -3392673789595308551L,
  -3392276027416550229L,
  -3389287908710062116L,
  -3387785602236307934L,
  -3386202366122946400L,
  -3383669903137310556L,
  -3381092196206676468L,
  -3380786984149319244L,
  -3380434490056886805L,
  -3379549383974919890L,
  -3377237457773296845L,
  -3375956161649158337L,
  -3375434927329062397L,
  -3375041383366842963L,
  -3373527407860618873L,
  -3369244584756170706L,
  -3368669157434601231L,
  -3368114057135265735L,
  -3367280690689202908L,
  -3366733608296372355L,
  -3366474777790990053L,
  -3365939089782984813L,
  -3365342328185589249L,
  -3365018370204534210L,
  -3363158216018485043L,
  -3363083094979007813L,
  -3362487380074191294L,
  -3361810620345957947L,
  -3360069003457562241L,
  -3358980134763991318L,
  -3356821215156646044L,
  -3356111216840165081L,
  -3350806389539417515L,
  -3350064384349199046L,
  -3349594600578433621L,
  -3349566554864005235L,
  -3348989901539902308L,
  -3348810824091140445L,
  -3347447808928416254L,
  -3346979873745664537L,
  -3344383375327116374L,
  -3344285910339163449L,
  -3342711970846746342L,
  -3338648523065410502L,
  -3337641672107806618L,
  -3337148646943260466L,
  -3335880124178764890L,
  -3335579933473054246L,
  -3335407969105532064L,
  -3334911862404483783L,
  -3334572599840742157L,
  -3333669541605711308L,
  -3332340518308943418L,
  -3330212318202690397L,
  -3330071238250694087L,
  -3326307897214982776L,
  -3326214198749502642L,
  -3325357048186824803L,
  -3324683492213974335L,
  -3324315580767766391L,
  -3323781047854705374L,
  -3320934551252014627L,
  -3318472631081206364L,
  -3318135193719019764L,
  -3317956385962625109L,
  -3317324990152127407L,
  -3316650251703842962L,
  -3315176802129334485L,
  -3314566461120271901L,
  -3313944307055545017L,
  -3313172790348873438L,
  -3309396385850995491L,
  -3308661092334979371L,
  -3308484462470304945L,
  -3307245869414219224L,
  -3305950694438137677L,
  -3304583839925646232L,
  -3304515488906372159L,
  -3303175760103250320L,
  -3302666059544244357L,
  -3302005994390141582L,
  -3300461329834142121L,
  -3298718051619603732L,
  -3298655238907844022L,
  -3297607612122274400L,
  -3297204048602258762L,
  -3297049752957578476L,
  -3296489213048076845L,
  -3294900437367877260L,
  -3293362626970325938L,
  -3292092914513049317L,
  -3291525438586438134L,
  -3290839783926374919L,
  -3290024971902431335L,
  -3289875081291706701L,
  -3289250028864611272L,
  -3288701851735459661L,
  -3285618631093798196L,
  -3282709615210617023L,
  -3281438710757867417L,
  -3281137522581432702L,
  -3281013124820555247L,
  -3280752154433250307L,
  -3279488833460512575L,
  -3279344367499998704L,
  -3278220154356746208L,
  -3275275877403586603L,
  -3274826629462778445L,
  -3270493894031344631L,
  -3270334206012181286L,
  -3270114128693276010L,
  -3268082124028719591L,
  -3268027539309670741L,
  -3267136029600319034L,
  -3266669074964360256L,
  -3265784223721512720L,
  -3264668670516508059L,
  -3264271627919764959L,
  -3262568099888575434L,
  -3260063943416042731L,
  -3260006080995175609L,
  -3258472429297675363L,
  -3256152961944682875L,
  -3254793453113981821L,
  -3253042209103891288L,
  -3251527993575646381L,
  -3250372750521618688L,
  -3249960583490300257L,
  -3249355893231057607L,
  -3248105693679065546L,
  -3245952584080083246L,
  -3245538782599462223L,
  -3243880270397533486L,
  -3243265423988869343L,
  -3241069438079200441L,
  -3239972938237820827L,
  -3239219927113039563L,
  -3238289494100517506L,
  -3237970169820381666L,
  -3237893848215442529L,
  -3237194953578463195L,
  -3236940988640248573L,
  -3235018163859175489L,
  -3233625093022840949L,
  -3231071577741338761L,
  -3229045868478259470L,
  -3223832135063232953L,
  -3222934033320017341L,
  -3218118247944927743L,
  -3217828558498085687L,
  -3211557069573670341L,
  -3210879469773959654L,
  -3210667162285527623L,
  -3208956262912638364L,
  -3202517434160440915L,
  -3200551269652961774L,
  -3199281282526299503L,
  -3198050917571566913L,
  -3196180012769507329L,
  -3196024385683416330L,
  -3188383289801996684L};
  auto const structs_t_original = structs_col{child_col_t}.release();

  auto child_col_values              = col_wrapper{-4469515842777532803L};
  auto const structs_values = structs_col{child_col_values}.release();

  auto structs_t = cudf::slice(structs_t_original->view(), {0, 10})[0];  // the entire column t
  auto results   = search_bounds(structs_t, structs_values);
  auto expected_lower_bound = int32s_col{0, 1, 2, 6, 8, 10};
  auto expected_upper_bound = int32s_col{1, 2, 6, 8, 10, 10};
  CUDF_TEST_EXPECT_COLUMNS_EQUAL(expected_lower_bound, results.first->view(), print_all);
  CUDF_TEST_EXPECT_COLUMNS_EQUAL(expected_upper_bound, results.second->view(), print_all);

  structs_t            = cudf::slice(structs_t_original->view(), {0, 5})[0];
  results              = search_bounds(structs_t, structs_values);
  expected_lower_bound = int32s_col{0, 1, 2, 5, 5, 5};
  expected_upper_bound = int32s_col{1, 2, 5, 5, 5, 5};
  CUDF_TEST_EXPECT_COLUMNS_EQUAL(expected_lower_bound, results.first->view(), print_all);
  CUDF_TEST_EXPECT_COLUMNS_EQUAL(expected_upper_bound, results.second->view(), print_all);

  structs_t            = cudf::slice(structs_t_original->view(), {5, 10})[0];
  results              = search_bounds(structs_t, structs_values);
  expected_lower_bound = int32s_col{0, 0, 0, 1, 3, 5};
  expected_upper_bound = int32s_col{0, 0, 1, 3, 5, 5};
  CUDF_TEST_EXPECT_COLUMNS_EQUAL(expected_lower_bound, results.first->view(), print_all);
  CUDF_TEST_EXPECT_COLUMNS_EQUAL(expected_upper_bound, results.second->view(), print_all);
}

TYPED_TEST(TypedStructSearchTest, SimpleInputWithNullsTests)
{
  using col_wrapper = cudf::test::fixed_width_column_wrapper<TypeParam, int32_t>;

  auto child_col_values     = col_wrapper{{1, null, 70, XXX, 2, 100}, null_at(1)};
  auto const structs_values = structs_col{{child_col_values}, null_at(3)}.release();

  // Sorted asc, nulls first
  auto child_col_t = col_wrapper{{XXX, null, 0, 1, 2, 2, 2, 2, 3, 3, 4}, null_at(1)};
  auto structs_t   = structs_col{{child_col_t}, null_at(0)}.release();

  auto results =
    search_bounds(structs_t, structs_values, {cudf::order::ASCENDING}, {cudf::null_order::BEFORE});
  auto expected_lower_bound = int32s_col{3, 1, 11, 0, 4, 11};
  auto expected_upper_bound = int32s_col{4, 2, 11, 1, 8, 11};
  CUDF_TEST_EXPECT_COLUMNS_EQUAL(expected_lower_bound, results.first->view(), print_all);
  CUDF_TEST_EXPECT_COLUMNS_EQUAL(expected_upper_bound, results.second->view(), print_all);

  // Sorted asc, nulls last
  child_col_t = col_wrapper{{0, 1, 2, 2, 2, 2, 3, 3, 4, null, XXX}, null_at(9)};
  structs_t   = structs_col{{child_col_t}, null_at(10)}.release();
  results =
    search_bounds(structs_t, structs_values, {cudf::order::ASCENDING}, {cudf::null_order::AFTER});
  expected_lower_bound = int32s_col{1, 9, 9, 10, 2, 9};
  expected_upper_bound = int32s_col{2, 10, 9, 11, 6, 9};
  CUDF_TEST_EXPECT_COLUMNS_EQUAL(expected_lower_bound, results.first->view(), print_all);
  CUDF_TEST_EXPECT_COLUMNS_EQUAL(expected_upper_bound, results.second->view(), print_all);

  // Sorted dsc, nulls first
  child_col_t = col_wrapper{{XXX, null, 4, 3, 3, 2, 2, 2, 2, 1, 0}, null_at(1)};
  structs_t   = structs_col{{child_col_t}, null_at(0)}.release();
  results =
    search_bounds(structs_t, structs_values, {cudf::order::DESCENDING}, {cudf::null_order::BEFORE});
  expected_lower_bound = int32s_col{9, 11, 0, 11, 5, 0};
  expected_upper_bound = int32s_col{10, 11, 0, 11, 9, 0};
  CUDF_TEST_EXPECT_COLUMNS_EQUAL(expected_lower_bound, results.first->view(), print_all);
  CUDF_TEST_EXPECT_COLUMNS_EQUAL(expected_upper_bound, results.second->view(), print_all);

  // Sorted dsc, nulls last
  child_col_t = col_wrapper{{4, 3, 3, 2, 2, 2, 2, 1, 0, null, XXX}, null_at(9)};
  structs_t   = structs_col{{child_col_t}, null_at(10)}.release();
  results =
    search_bounds(structs_t, structs_values, {cudf::order::DESCENDING}, {cudf::null_order::AFTER});
  expected_lower_bound = int32s_col{7, 0, 0, 0, 3, 0};
  expected_upper_bound = int32s_col{8, 0, 0, 0, 7, 0};
  CUDF_TEST_EXPECT_COLUMNS_EQUAL(expected_lower_bound, results.first->view(), print_all);
  CUDF_TEST_EXPECT_COLUMNS_EQUAL(expected_upper_bound, results.second->view(), print_all);
}

TYPED_TEST(TypedStructSearchTest, SimpleInputWithValuesHavingNullsTests)
{
  using col_wrapper = cudf::test::fixed_width_column_wrapper<TypeParam, int32_t>;

  auto child_col_values     = col_wrapper{{1, null, 70, XXX, 2, 100}, null_at(1)};
  auto const structs_values = structs_col{{child_col_values}, null_at(3)}.release();

  // Sorted asc, search nulls first
  auto child_col_t = col_wrapper{0, 0, 0, 1, 2, 2, 2, 2, 3, 3, 4};
  auto structs_t   = structs_col{{child_col_t}}.release();

  auto results =
    search_bounds(structs_t, structs_values, {cudf::order::ASCENDING}, {cudf::null_order::BEFORE});
  auto expected_lower_bound = int32s_col{3, 0, 11, 0, 4, 11};
  auto expected_upper_bound = int32s_col{4, 0, 11, 0, 8, 11};
  CUDF_TEST_EXPECT_COLUMNS_EQUAL(expected_lower_bound, results.first->view(), print_all);
  CUDF_TEST_EXPECT_COLUMNS_EQUAL(expected_upper_bound, results.second->view(), print_all);

  // Sorted asc, search nulls last
  results =
    search_bounds(structs_t, structs_values, {cudf::order::ASCENDING}, {cudf::null_order::AFTER});
  expected_lower_bound = int32s_col{3, 11, 11, 11, 4, 11};
  expected_upper_bound = int32s_col{4, 11, 11, 11, 8, 11};
  CUDF_TEST_EXPECT_COLUMNS_EQUAL(expected_lower_bound, results.first->view(), print_all);
  CUDF_TEST_EXPECT_COLUMNS_EQUAL(expected_upper_bound, results.second->view(), print_all);

  // Sorted dsc, search nulls first
  child_col_t = col_wrapper{4, 3, 3, 2, 2, 2, 2, 1, 0, 0, 0};
  structs_t   = structs_col{{child_col_t}}.release();
  results =
    search_bounds(structs_t, structs_values, {cudf::order::DESCENDING}, {cudf::null_order::BEFORE});
  expected_lower_bound = int32s_col{7, 11, 0, 11, 3, 0};
  expected_upper_bound = int32s_col{8, 11, 0, 11, 7, 0};
  CUDF_TEST_EXPECT_COLUMNS_EQUAL(expected_lower_bound, results.first->view(), print_all);
  CUDF_TEST_EXPECT_COLUMNS_EQUAL(expected_upper_bound, results.second->view(), print_all);

  // Sorted dsc, search nulls last
  results =
    search_bounds(structs_t, structs_values, {cudf::order::DESCENDING}, {cudf::null_order::AFTER});
  expected_lower_bound = int32s_col{7, 0, 0, 0, 3, 0};
  expected_upper_bound = int32s_col{8, 0, 0, 0, 7, 0};
  CUDF_TEST_EXPECT_COLUMNS_EQUAL(expected_lower_bound, results.first->view(), print_all);
  CUDF_TEST_EXPECT_COLUMNS_EQUAL(expected_upper_bound, results.second->view(), print_all);
}

TYPED_TEST(TypedStructSearchTest, SimpleInputWithTargetHavingNullsTests)
{
  using col_wrapper = cudf::test::fixed_width_column_wrapper<TypeParam, int32_t>;

  auto child_col_values     = col_wrapper{1, 0, 70, 0, 2, 100};
  auto const structs_values = structs_col{{child_col_values}}.release();

  // Sorted asc, nulls first
  auto child_col_t = col_wrapper{{XXX, null, 0, 1, 2, 2, 2, 2, 3, 3, 4}, null_at(1)};
  auto structs_t   = structs_col{{child_col_t}, null_at(0)}.release();

  auto results =
    search_bounds(structs_t, structs_values, {cudf::order::ASCENDING}, {cudf::null_order::BEFORE});
  auto expected_lower_bound = int32s_col{3, 2, 11, 2, 4, 11};
  auto expected_upper_bound = int32s_col{4, 3, 11, 3, 8, 11};
  CUDF_TEST_EXPECT_COLUMNS_EQUAL(expected_lower_bound, results.first->view(), print_all);
  CUDF_TEST_EXPECT_COLUMNS_EQUAL(expected_upper_bound, results.second->view(), print_all);

  // Sorted asc, nulls last
  child_col_t = col_wrapper{{0, 1, 2, 2, 2, 2, 3, 3, 4, null, XXX}, null_at(9)};
  structs_t   = structs_col{{child_col_t}, null_at(10)}.release();
  results =
    search_bounds(structs_t, structs_values, {cudf::order::ASCENDING}, {cudf::null_order::AFTER});
  expected_lower_bound = int32s_col{1, 0, 9, 0, 2, 9};
  expected_upper_bound = int32s_col{2, 1, 9, 1, 6, 9};
  CUDF_TEST_EXPECT_COLUMNS_EQUAL(expected_lower_bound, results.first->view(), print_all);
  CUDF_TEST_EXPECT_COLUMNS_EQUAL(expected_upper_bound, results.second->view(), print_all);

  // Sorted dsc, nulls first
  child_col_t = col_wrapper{{XXX, null, 4, 3, 3, 2, 2, 2, 2, 1, 0}, null_at(1)};
  structs_t   = structs_col{{child_col_t}, null_at(0)}.release();
  results =
    search_bounds(structs_t, structs_values, {cudf::order::DESCENDING}, {cudf::null_order::BEFORE});
  expected_lower_bound = int32s_col{9, 10, 0, 10, 5, 0};
  expected_upper_bound = int32s_col{10, 11, 0, 11, 9, 0};
  CUDF_TEST_EXPECT_COLUMNS_EQUAL(expected_lower_bound, results.first->view(), print_all);
  CUDF_TEST_EXPECT_COLUMNS_EQUAL(expected_upper_bound, results.second->view(), print_all);

  // Sorted dsc, nulls last
  child_col_t = col_wrapper{{4, 3, 3, 2, 2, 2, 2, 1, 0, null, XXX}, null_at(9)};
  structs_t   = structs_col{{child_col_t}, null_at(10)}.release();
  results =
    search_bounds(structs_t, structs_values, {cudf::order::DESCENDING}, {cudf::null_order::AFTER});
  expected_lower_bound = int32s_col{7, 8, 0, 8, 3, 0};
  expected_upper_bound = int32s_col{8, 11, 0, 11, 7, 0};
  CUDF_TEST_EXPECT_COLUMNS_EQUAL(expected_lower_bound, results.first->view(), print_all);
  CUDF_TEST_EXPECT_COLUMNS_EQUAL(expected_upper_bound, results.second->view(), print_all);
}

TYPED_TEST(TypedStructSearchTest, ComplexStructTest)
{
  // Testing on struct<string, numeric, bool>.
  using col_wrapper = cudf::test::fixed_width_column_wrapper<TypeParam, int32_t>;

  auto names_column_t =
    strings_col{"Cherry", "Kiwi", "Lemon", "Newton", "Tomato", /*NULL*/ "Washington"};
  auto ages_column_t  = col_wrapper{{5, 10, 15, 20, null, XXX}, null_at(4)};
  auto is_human_col_t = bools_col{false, false, false, false, false, /*NULL*/ true};

  auto const structs_t =
    structs_col{{names_column_t, ages_column_t, is_human_col_t}, null_at(5)}.release();

  auto names_column_values = strings_col{"Bagel", "Tomato", "Lemonade", /*NULL*/ "Donut", "Butter"};
  auto ages_column_values  = col_wrapper{{10, null, 15, XXX, 17}, null_at(1)};
  auto is_human_col_values = bools_col{false, false, true, /*NULL*/ true, true};
  auto const structs_values =
    structs_col{{names_column_values, ages_column_values, is_human_col_values}, null_at(3)}
      .release();

  auto const results =
    search_bounds(structs_t, structs_values, {cudf::order::ASCENDING}, {cudf::null_order::AFTER});
  auto const expected_lower_bound = int32s_col{0, 4, 3, 5, 0};
  auto const expected_upper_bound = int32s_col{0, 5, 3, 6, 0};
  CUDF_TEST_EXPECT_COLUMNS_EQUAL(expected_lower_bound, results.first->view(), print_all);
  CUDF_TEST_EXPECT_COLUMNS_EQUAL(expected_upper_bound, results.second->view(), print_all);
}
